<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>windows下安装Qjson</title>
      <link href="/windows-xia-an-zhuang-qjson/"/>
      <url>/windows-xia-an-zhuang-qjson/</url>
      
        <content type="html"><![CDATA[<p>本文是我在安装Qjson的过程中遇到的问题的总结，以及完整的Qjson的安装教程。<br>Qjson的编译需要使用cmake，关于cmake的安装可以参照<br><a href="https://blog.csdn.net/yiminghd2861/article/details/89104533" target="_blank" rel="noopener">https://blog.csdn.net/yiminghd2861/article/details/89104533</a><br>感谢该博客在安装过程中对我的帮助，链接如下：<br><a href="https://blog.csdn.net/weixin_33804990/article/details/86246465" target="_blank" rel="noopener">https://blog.csdn.net/weixin_33804990/article/details/86246465</a><br>接下来进入正题，Qjson的安装。</p><p>###1.从github上将Qjson源码clone到本地<br>github地址：<a href="https://github.com/flavio/qjson" target="_blank" rel="noopener">https://github.com/flavio/qjson</a><br>网速慢时可以先fork仓库到自己主页下，之后通过码云将仓库移到码云中，再从码云完成clone到本地的过程。</p><p>###2.进入Qjson目录<br>在下图所示位置新建文件夹build<br><img src="/.io//1.png" alt="1"></p><p>###3.使用cmake进行编译<br>打开桌面上的cmake-gui，没有创建桌面快捷方式的话去cmake/bin目录下找。<br>指定source code 和build 目录如下图所示：<br><img src="/.io//2.png" alt="2"><br>通过Add Entry添加C和C++编译器，注意由于本机已经安装mingw32，故gcc.exe和g++.exe目录已经在环境变量中,输入如下图所示：<br><img src="/.io//3.png" alt="3"><br>然后分别单击configure和generate，在build目录下生成makefile文件，在点击configure后会弹出对话框，选择指定生成的工程文件类型，我选的mingw32，如图：<br><img src="/.io//4.png" alt="4"><br>在configure过程中可能会遇到报错，仔细看报错信息，我的报错原因是因为1.安装的Qt5core文件夹没有找到需要手动设置路径；2.将QT4_BUILD选项中的√取消；3.没有找到qmake.exe文件需要手动设置，如下图所示：<br><img src="/.io//5.png" alt="5"></p><p>###4.在管理员权限下进入命令行<br>进入build目录执行mingw32-make，成功后继续执行mingw32-make install完成配置。如下图所示：<br><img src="/.io//6.png" alt="6"><br><img src="/.io//7.png" alt="7"><br>需要注意的是，配置后的文件不在build目录下，需要注意输出的文件路径，在该路径下。完成后如图所示：<br><img src="/.io//8.png" alt="8"></p><p>###5.在Qt中的使用方法<br>bin中的dll就是我们需要的。把三个目录移到你需要使用的工程的目录下面。<br>在pro文件加入INCLUDEPATH+=../include<br>LIBS +=-L.. -llib/qjson<br>这个目录要看你自己的设置了.只要编译不报错就说明成功.<br>具体根据自己的情况设置。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C++中字符串连接时超出内存限制</title>
      <link href="/c-zhong-zi-fu-chuan-lian-jie-shi-chao-chu-nei-cun-xian-zhi/"/>
      <url>/c-zhong-zi-fu-chuan-lian-jie-shi-chao-chu-nei-cun-xian-zhi/</url>
      
        <content type="html"><![CDATA[<p>今天在力扣做题的时候使用字符串链接遇到了一些小问题：</p><pre class="line-numbers language-c++"><code class="language-c++">ans = ans + a;string num_in = to_string(num);ans = ans + num_in;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样写的时候会报错超出内存限制，改成下面的代码后就可以了</p><pre class="line-numbers language-c++"><code class="language-c++">ans += a;string num_in = to_string(num);ans += num_in;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>原因是使用ans = ans + a;语句时，系统会新开辟一个空间用于存放ans + a的结果，ans+a相当于一个匿名变量，之后再把这个结果赋值给ans。当ans本身长度很长时就会导致超出内存限制的结果。<br>ans += a;相当于调用ans.append( )直接在字符串ans末尾添加新的字符串，不会产生匿名变量，因此不会导致超出内存限制的结果。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>first-post</title>
      <link href="/first-post/"/>
      <url>/first-post/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://Kevin-shc.github.io">my blog</a> ! This is my first try.<br>Thanks for the help when I build this blog. Here is the <a href="https://gist.github.com/btfak/18938572f5df000ebe06fbd1872e4e39" target="_blank" rel="noopener">link</a> .</p><pre class=" language-bash"><code class="language-bash">$ It's just a <span class="token keyword">function</span> try.</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
